{
  "name": "alchemy-api",
  "description": "An Alchemy API library for Node.js",
  "tags": [
    "Alchemy",
    "Natural Language Processing",
    "util"
  ],
  "version": "1.3.1",
  "author": {
    "name": "Jason Morgan",
    "email": "jason@framingeinstein.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "http://github.com/framingeinstein/node-alchemy.git"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "node_modules/.bin/nodeunit test"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.2"
  },
  "dependencies": {
    "image-type": "^2.0.2"
  },
  "readme": " alchemy-api - An Alchemy API library for Node.js\n====================\n[![Build Status](https://secure.travis-ci.org/framingeinstein/node-alchemy.png)](http://travis-ci.org/framingeinstein/node-alchemy)\n\nThis module provides calls to the [AlchemyAPI](http://www.alchemyapi.com/) for [Nodejs](http://nodejs.org).\nFor more information on the API request and responses visit the [AlchemyAPI docs](http://www.alchemyapi.com/api/).  To use the module you will need to obtain an api key from [Alchemy](http://www.alchemyapi.com/api/register.html).\n\nInstallation\n------------\nYou can install this through npm: npm install alchemy-api\n\nYou can also install via git by cloning: `git clone https://github.com/framingeinstein/node-alchemy.git /path/to/alchemy-api`\n\nUsage\n-----\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.sentiment('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/ for format of returned object\n      var sentiment = response.docSentiment;\n\n      // Do something with data\n    });\n\nTests\n-----\nTo run tests type `npm test`\n\nAlchemyAPI Features\n---------------\n\nNamed Entity Extraction\n-----------------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.entities('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/entity/htmlc.html for format of returned object\n      var entities = response.entities;\n\n      // Do something with data\n    });\n\nSentiment Analysis\n------------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.sentiment('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/sentiment/htmlc.html for format of returned object\n      var sentiment = response.docSentiment;\n\n      // Do something with data\n    });\n\nTargeted Sentiment Analysis\n------------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.sentiment_targeted('<URL|HTML|TEXT>', '<Target>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/sentiment/htmlc.html for format of returned object\n      var sentiment = response.docSentiment;\n\n      // Do something with data\n    });\n\nRelation Extraction\n-------------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.relations('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/relation/htmlc.html for format of returned object\n      var relations = response.relations;\n\n      // Do something with data\n    });\n\nConcept Tagging\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.concepts('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/concept/htmlc.html for format of returned object\n      var concepts = response.concepts;\n\n      // Do something with data\n    });\n\nKeyword / Terminology Extraction\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.keywords('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/keyword/htmlc.html for format of returned object\n      var keywords = response.keywords;\n\n      // Do something with data\n    });\n\nTaxonomy\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.taxonomies('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/taxonomy_calls/html.html for format of returned object\n      var taxonomies = response.taxonomies;\n\n      // Do something with data\n    });\n\nTopic Categorization\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.category('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/categ/htmlc.html for format of returned object\n      var category = response.category;\n\n      // Do something with data\n    });\n\nImage Link Extraction (Main Image)\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.imageLink('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/image-link-extraction/htmlc.html for format of returned object\n      var image = response.image;\n\n      // Do something with data\n    });\n\nImage Tags/Keyword Extraction\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.imageKeywords('<URL|IMAGE>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/image-tagging/urls.html for format of returned object\n      var imageKeywords = response.imageKeywords;\n\n      // Do something with data\n    });\n\nImage Faces Detection \n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.imageFaces('<URL|IMAGE>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/face-detection/urls.html for format of returned object\n      var imageFaces = response.imageFaces;\n\n      // Do something with data\n    });\n\nLanguage Detection\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.language('<URL|HTML|TEXT>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/lang/htmlc.html for format of returned object\n      var language = response.language;\n\n      // Do something with data\n    });\n\nAuthor Extraction\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.author('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/author/htmlc.html for format of returned object\n      var author = response.author;\n\n      // Do something with data\n    });\n\nText Extraction / Web Page Cleaning\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.text('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/text/htmlc.html for format of returned object\n      var text = response.text;\n\n      // Do something with data\n    });\n\nStructured Content Scraping\n---------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.scrape('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/scrape/htmlc.html for format of returned object\n      var results = response.queryResults;\n\n      // Do something with data\n    });\n\nMicroformats\n------------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.microformats('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/mformat/htmlc.html for format of returned object\n      var microformats = response.microformats;\n\n      // Do something with data\n    });\n\nRSS / ATOM Feed Discovery\n----------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.feeds('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/feed/htmlc.html for format of returned object\n      var feeds = response.feeds;\n\n      // Do something with data\n    });\n\nPublication Date\n----------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.publicationDate('<URL|HTML>', {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/publication-date/htmlc.html for format of returned object\n      var publicationDate = response.publicationDate; //YYYYMMDDTHHMMSS string\n\n      // Do something with data\n    });\n\nCombined Feature Extraction Call\n----------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.combined('<URL|HTML|TEXT>', [\"FEATURE_NAME\",...], {}, function(err, response) {\n      if (err) throw err;\n\n      // See http://www.alchemyapi.com/api/combined-call/ for format of returned object.\n      // Each feature response will be available as a separate property.\n      var feature_response = response.FEATURE_NAME; \n\n      // Do something with data\n    });\n\nAPI Key Information\n----------\n    var AlchemyAPI = require('alchemy-api');\n    var alchemy = new AlchemyAPI('<YOUR API KEY>');\n    alchemy.apiKeyInfo({}, function(err, response) {\n      if (err) throw err;\n\n      // Do something with data\n      console.log('Status:', response.status, 'Consumed:', response.consumedDailyTransactions, 'Limit:', response.dailyTransactionLimit);\n      \n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/framingeinstein/node-alchemy/issues"
  },
  "_id": "alchemy-api@1.3.1",
  "_from": "alchemy-api@"
}
